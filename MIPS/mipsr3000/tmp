
void decode::processIMDSGN_SD()
{
  sc_uint<32> ir_ri=IR_RI.read();

  IMDSGN_SD.write(ir_ri[15]);
}

void decode::processIMDSEX_SD()
{
  sc_uint<32> ir_ri=IR_RI.read();

  if ((IMDSGN_SD.read() == 1) && (I_OSGND_SD.read() == 1))
    IMDSEX_SD.write(0xFFFF);
  else
    IMDSEX_SD.write(0x0);
}

void decode::processIOPER_SD()
{
  sc_uint<32> ir_ri=IR_RI.read();

  if (((int)OPCOD_SD.read() == bltzal_i)||
     ((int)OPCOD_SD.read() == jalr_i)||
     ((int)OPCOD_SD.read() == jal_i)||
     ((int)OPCOD_SD.read() == bgezal_i))
    IOPER_SD.write( SEQADR_SD.read());
  else if (((int)OPCOD_SD.read() == sra_i)||
          ((int)OPCOD_SD.read() == srl_i)||
          ((int)OPCOD_SD.read() == sll_i))
    IOPER_SD.write( ir_ri.range(13,6));
  else if ((int)OPCOD_SD.read() == lui_i)
    IOPER_SD.write( ir_ri.range(15,0)<<16);
  else if ((int)OPCOD_SD.read() == mflo_i)
    IOPER_SD.write(LO_RW.read());
  else if ((int)OPCOD_SD.read() == mfhi_i)
    IOPER_SD.write(HI_RW.read());
  else
    IOPER_SD.write(IMDSEX_SD.read() << 16 | ir_ri.range(15,0));
}

void decode::processOFFSET_SD()
{
  sc_uint<32> imdsex_sd=IMDSEX_SD.read();
  sc_uint<32> ir_ri=IR_RI.read();

  OFFSET_SD.write(imdsex_sd.range(13,0) << 18 | ir_ri.range(15,0) << 2);
}

void decode::processS_CMP_T_SD()
{
  S_CMP_T_SD.write(SOPER_SD.read() ^ TOPER_SD.read());
}

void decode::processS_EQ_T_SD()
{
  S_EQ_T_SD.write((S_CMP_T_SD.read()==0x0)?1:0);
}

void decode::processS_LT_Z_SD()
{
  sc_uint<32> soper_sd=SOPER_SD.read();

  S_LT_Z_SD.write((soper_sd[31]==1)?1:0);
}

void decode::processS_LE_Z_SD()
{
  sc_uint<32> soper_sd=SOPER_SD.read();

  S_LE_Z_SD.write(((soper_sd[31]==1)||(soper_sd==0x0))?1:0);
}

void decode::processSLEEP_SD()
{
  SLEEP_SD.write(((int)OPCOD_SD.read() == sleep_i) ? 1 : 0);
}

void decode::processNEXTPC_SD()
{
  if (((int)OPCOD_SD.read() == jr_i)||((int)OPCOD_SD.read() == jalr_i))
    NEXTPC_SD.write(SOPER_SD.read());
  else if (((int)OPCOD_SD.read() == j_i)||((int)OPCOD_SD.read() == jal_i))
    NEXTPC_SD.write(JMPADR_SD.read());
  else if ((((int)OPCOD_SD.read() == beq_i)&&(S_EQ_T_SD.read() == 1))||
           (((int)OPCOD_SD.read() == bne_i)&&(S_EQ_T_SD.read() == 0))||
           (((int)OPCOD_SD.read() == bltz_i)&&(S_LT_Z_SD.read() == 1))||
           (((int)OPCOD_SD.read() == bltzal_i)&&(S_LT_Z_SD.read() == 1))||
           (((int)OPCOD_SD.read() == blez_i)&&(S_LE_Z_SD.read() == 1))||
           (((int)OPCOD_SD.read() == bgtz_i)&&(S_LE_Z_SD.read() == 0))||
           (((int)OPCOD_SD.read() == bgez_i)&&(S_LT_Z_SD.read() == 0))||
           (((int)OPCOD_SD.read() == bgezal_i)&&(S_LT_Z_SD.read() == 0))
          )
    NEXTPC_SD.write(BRAADR_SD.read());
  else
    NEXTPC_SD.write(SEQADR_SD.read());
}

void decode::processILLGINS_XD()
{
  ILLGINS_XD.write(I_ILLG_SD.read());
}

void decode::processC0UNUSE_XD()
{
  sc_uint<32> sr_ri=SR_RI.read();

  if (((int)OPCOD_SD.read() == rfe_i)||
     ((int)OPCOD_SD.read() == mfc0_i)||
     ((int)OPCOD_SD.read() == mtc0_i))
    C0UNUSE_XD.write(sr_ri[1] & (!sr_ri[28]));
  else
    C0UNUSE_XD.write(0);
}
